{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>helm</code>-charts","text":"<p>Another repository with lightweight Helm Charts.</p> <p> </p> <p></p>"},{"location":"#usage","title":"Usage","text":"<p>Helm must be installed to use the charts. Please refer to Helm's documentation to get started. Once Helm has been set up correctly, add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages. Use <code>helm search repo pascaliske</code> to see a list of all available charts.</p> <p>You can install a chart release using the following command:</p> <pre><code>helm install &lt;release&gt; pascaliske/&lt;chart&gt; --values values.yaml\n</code></pre> <p>To uninstall a chart release use <code>helm</code>'s delete command:</p> <pre><code>helm delete &lt;chart&gt;\n</code></pre>"},{"location":"#charts","title":"Charts","text":"<ul> <li><code>cloudflare-dyndns</code></li> <li><code>cloudflared</code></li> <li><code>code-server</code></li> <li><code>digitalocean-dyndns</code></li> <li><code>fritzbox-exporter</code></li> <li><code>gitlab</code></li> <li><code>homer</code></li> <li><code>linkding</code></li> <li><code>paperless</code></li> <li><code>prometheus</code></li> <li><code>redis</code></li> <li><code>snapdrop</code></li> <li><code>traefik-errors</code></li> <li><code>unbound</code></li> <li><code>uptime-kuma</code></li> <li><code>vikunja</code></li> </ul>"},{"location":"#contributors","title":"Contributors","text":"<p>Thanks goes to these wonderful people (emoji key):</p> Johannes Kastl\ud83d\udcbb \ud83d\udcd6 Catriel M\u00fcller\ud83d\udcbb Jake(Jaehak Song)\ud83d\udcbb <p>This project follows the all-contributors specification. Contributions of any kind welcome!</p>"},{"location":"#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"LICENSE/","title":"The MIT License","text":"<p>Copyright 2022 Pascal Iske, https://pascaliske.dev</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"charts/base/","title":"<code>base</code>","text":"<p>A Helm chart for Kubernetes</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> </ul>"},{"location":"charts/base/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/base/#usage","title":"Usage","text":"<p>Note: This chart is a library chart which can not be used directly!</p>"},{"location":"charts/base/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description"},{"location":"charts/base/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/base/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/clickhouse/","title":"<code>clickhouse</code>","text":"<p>A Helm chart for ClickHouse</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/clickhouse/clickhouse</li> <li>https://clickhouse.com</li> </ul>"},{"location":"charts/clickhouse/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/clickhouse/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install clickhouse pascaliske/clickhouse\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete clickhouse\n</code></pre>"},{"location":"charts/clickhouse/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description configMap.annotations object <code>{}</code> Additional annotations for the config map object. configMap.create bool <code>true</code> Create a new config map object. configMap.existingConfigMap string <code>\"\"</code> Use an existing config map object. configMap.files object <code>{}</code> Map of configuration files as strings. configMap.labels object <code>{}</code> Additional labels for the config map object. configMap.mountPath string <code>\"/etc/config\"</code> Mount path of the config map object. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"StatefulSet\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. extraArgs list <code>[]</code> List of extra arguments for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"clickhouse/clickhouse-server\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/var/lib/clickhouse\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.rest.enabled bool <code>true</code> Enable the port inside the <code>Controller</code> and <code>Service</code> objects. ports.rest.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.rest.port int <code>8123</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.rest.protocol string <code>\"TCP\"</code> The protocol used for the service. ports.rpc.enabled bool <code>true</code> Enable the port inside the <code>Controller</code> and <code>Service</code> objects. ports.rpc.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.rpc.port int <code>9000</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.rpc.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.clusterIP string <code>\"\"</code> ClusterIP used if service type is <code>ClusterIP</code>. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.loadBalancerIP string <code>\"\"</code> LoadBalancerIP if service type is <code>LoadBalancer</code>. service.loadBalancerSourceRanges list <code>[]</code> Allowed addresses when service type is <code>LoadBalancer</code>. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller."},{"location":"charts/clickhouse/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/clickhouse/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/cloudflare-dyndns/","title":"<code>cloudflare-dyndns</code>","text":"<p>A Helm chart for a CronJob based Cloudflare DynDNS client.</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/pascaliske/docker-cloudflare-dyndns</li> </ul>"},{"location":"charts/cloudflare-dyndns/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/cloudflare-dyndns/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install cloudflare-dyndns pascaliske/cloudflare-dyndns\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete cloudflare-dyndns\n</code></pre>"},{"location":"charts/cloudflare-dyndns/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description cronJob.annotations object <code>{}</code> Additional annotations for the cronjob object. cronJob.enabled bool <code>true</code> Create a cron job to update the DNS zone. cronJob.failedJobsHistoryLimit int <code>1</code> The number of failed finished jobs to retain. cronJob.labels object <code>{}</code> Additional labels for the cronjob object. cronJob.nameservers list <code>[]</code> The nameservers used to resolve ip service domain. Leave empty to inherit from cluster/node. cronJob.schedule string <code>\"30 * * * *\"</code> Update schedule for the cron job. cronJob.successfulJobsHistoryLimit int <code>3</code> The number of successful finished jobs to retain. cronJob.suspend bool <code>false</code> Enable/disable the cron job schedule quickly. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. env[1] object <code>{\"name\":\"IP_SERVICE\",\"value\":\"ifconfig.co\"}</code> The IP service used to determine the current public IP. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the deployment. image.repository string <code>\"ghcr.io/pascaliske/cloudflare-dyndns\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> resources object <code>{}</code> Compute resources used by the container. More info here. secret.annotations object <code>{}</code> Additional annotations for the secret object. secret.create bool <code>true</code> Create a new secret containing the token. secret.existingSecret string <code>\"\"</code> Use an existing secret to store the token. secret.labels object <code>{}</code> Additional labels for the secret object. secret.token string <code>\"\"</code> Token used when not using an existing secret."},{"location":"charts/cloudflare-dyndns/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/cloudflare-dyndns/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/cloudflared/","title":"<code>cloudflared</code>","text":"<p>A Helm chart for cloudflared DNS over HTTPS tunnel.</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/crazy-max/docker-cloudflared</li> </ul>"},{"location":"charts/cloudflared/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/cloudflared/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install cloudflared pascaliske/cloudflared\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete cloudflared\n</code></pre>"},{"location":"charts/cloudflared/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. controller.strategy.rollingUpdate.maxSurge int <code>1</code> Specifies the maximum number of Pods that can be created over the desired number of Pods. controller.strategy.rollingUpdate.maxUnavailable int <code>0</code> Specifies the maximum number of Pods that can be unavailable during the update process. controller.strategy.type string <code>\"RollingUpdate\"</code> Strategy used to replace old pods. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. env[1] object <code>{\"name\":\"TUNNEL_DNS_UPSTREAM\",\"value\":\"https://1.1.1.1/dns-query,https://1.0.0.1/dns-query\"}</code> Upstream DNS provider used for the DNS-over-HTTPS tunnel. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"ghcr.io/crazy-max/cloudflared\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> resources object <code>{}</code> Compute resources used by the container. More info here. service.dns.annotations object <code>{}</code> Additional annotations for the service object. service.dns.enabled bool <code>true</code> Create a service for DNS endpoints. service.dns.labels object <code>{}</code> Additional labels for the service object. service.dns.nodePort string <code>nil</code> If the service is NodePort, specify a node port value here. service.dns.port int <code>5053</code> The service port used. service.dns.single bool <code>true</code> Combine TCP and UDP endpoints in a single service. service.dns.type string <code>\"ClusterIP\"</code> The service type used. service.metrics.annotations object <code>{}</code> Additional annotations for the service object. service.metrics.enabled bool <code>false</code> Create a service for the metrics endpoint. service.metrics.labels object <code>{}</code> Additional labels for the service object. service.metrics.nodePort string <code>nil</code> If the service is NodePort, specify a node port value here. service.metrics.port int <code>49312</code> The service port used. service.metrics.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. serviceMonitor.annotations object <code>{}</code> Additional annotations for the service monitor object. serviceMonitor.enabled bool <code>false</code> Create a service monitor for prometheus operator. serviceMonitor.interval string <code>\"30s\"</code> How frequently the exporter should be scraped. serviceMonitor.labels object <code>{}</code> Additional labels for the service monitor object. serviceMonitor.timeout string <code>\"10s\"</code> Timeout value for individual scrapes. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/cloudflared/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/cloudflared/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/code-server/","title":"<code>code-server</code>","text":"<p>A Helm chart for Kubernetes</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/coder/code-server</li> </ul>"},{"location":"charts/code-server/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/code-server/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install code-server pascaliske/code-server\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete code-server\n</code></pre>"},{"location":"charts/code-server/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. configMap.annotations object <code>{}</code> Additional annotations for the config map object. configMap.config object <code>{}</code> Map containing the configuration of code-server. configMap.create bool <code>true</code> Create a new config map object. configMap.existingConfigMap string <code>\"\"</code> Use an existing config map object. configMap.labels object <code>{}</code> Additional labels for the config map object. configMap.mountPath string <code>\"/etc/code-server\"</code> Mount path of the config map object. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. cronJob.annotations object <code>{}</code> Additional annotations for the cronjob object. cronJob.enabled bool <code>true</code> Create a cron job to auto update repositories. cronJob.failedJobsHistoryLimit int <code>1</code> The number of failed finished jobs to retain. cronJob.labels object <code>{}</code> Additional labels for the cronjob object. cronJob.schedule string <code>\"0 */4 * * *\"</code> Update schedule for the cron job. cronJob.successfulJobsHistoryLimit int <code>3</code> The number of successful finished jobs to retain. cronJob.suspend bool <code>false</code> Enable/disable the cron job schedule quickly. dnsConfig object <code>{}</code> Pod-level dns config. More info here. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. extraArgs list <code>[]</code> List of extra arguments for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"codercom/code-server\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.ensurePermissions bool <code>true</code> Manage permissions automatically. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/home/coder\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.projectsPath string <code>\"/home/coder/projects\"</code> Project folder inside the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>8080</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. repositories list <code>[]</code> List of repositories to be cloned / updated automatically. resources object <code>{}</code> Compute resources used by the container. More info here. secret.annotations object <code>{}</code> Additional annotations for the secret object. secret.create bool <code>true</code> Create a new secret containing the password. secret.existingSecret string <code>\"\"</code> Use an existing secret to store the password. secret.labels object <code>{}</code> Additional labels for the secret object. secret.password string <code>\"\"</code> Password used when not using an existing secret. securityContext object <code>{\"fsGroup\":1000,\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/code-server/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/code-server/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/digitalocean-dyndns/","title":"<code>digitalocean-dyndns</code>","text":"<p>A Helm chart for a CronJob based DigitalOcean DynDNS client.</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/pascaliske/docker-digitalocean-dyndns</li> </ul>"},{"location":"charts/digitalocean-dyndns/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/digitalocean-dyndns/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install digitalocean-dyndns pascaliske/digitalocean-dyndns\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete digitalocean-dyndns\n</code></pre>"},{"location":"charts/digitalocean-dyndns/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description cronJob.annotations object <code>{}</code> Additional annotations for the cronjob object. cronJob.enabled bool <code>true</code> Create a cron job to update the DNS zone. cronJob.failedJobsHistoryLimit int <code>1</code> The number of failed finished jobs to retain. cronJob.labels object <code>{}</code> Additional labels for the cronjob object. cronJob.nameservers list <code>[]</code> The nameservers used to resolve ip service domain. Leave empty to inherit from cluster/node. cronJob.schedule string <code>\"30 * * * *\"</code> Update schedule for the cron job. cronJob.successfulJobsHistoryLimit int <code>3</code> The number of successful finished jobs to retain. cronJob.suspend bool <code>false</code> Enable/disable the cron job schedule quickly. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. env[1] object <code>{\"name\":\"IP_SERVICE\",\"value\":\"ifconfig.co\"}</code> The IP service used to determine the current public IP. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the deployment. image.repository string <code>\"ghcr.io/pascaliske/digitalocean-dyndns\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> resources object <code>{}</code> Compute resources used by the container. More info here. secret.annotations object <code>{}</code> Additional annotations for the secret object. secret.create bool <code>true</code> Create a new secret containing the token. secret.existingSecret string <code>\"\"</code> Use an existing secret to store the token. secret.labels object <code>{}</code> Additional labels for the secret object. secret.token string <code>\"\"</code> Token used when not using an existing secret."},{"location":"charts/digitalocean-dyndns/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/digitalocean-dyndns/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/fritzbox-exporter/","title":"<code>fritzbox-exporter</code>","text":"<p>A Helm chart for fritzbox-exporter</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://git.r3ktm8.de/SeaLife-Docker/fritzbox_exporter</li> </ul>"},{"location":"charts/fritzbox-exporter/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/fritzbox-exporter/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install fritzbox-exporter pascaliske/fritzbox-exporter\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete fritzbox-exporter\n</code></pre>"},{"location":"charts/fritzbox-exporter/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"sealife/fritzbox-exporter\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> ports.metrics.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.metrics.port int <code>8765</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.metrics.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. serviceMonitor.annotations object <code>{}</code> Additional annotations for the service monitor object. serviceMonitor.enabled bool <code>true</code> Create a service monitor for prometheus operator. serviceMonitor.interval string <code>\"30s\"</code> How frequently the exporter should be scraped. serviceMonitor.labels object <code>{}</code> Additional labels for the service monitor object. serviceMonitor.timeout string <code>\"10s\"</code> Timeout value for individual scrapes."},{"location":"charts/fritzbox-exporter/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/fritzbox-exporter/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/gitlab/","title":"<code>gitlab</code>","text":"<p>A Helm chart for GitLab Omnibus</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://docs.gitlab.com</li> </ul>"},{"location":"charts/gitlab/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/gitlab/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install gitlab pascaliske/gitlab\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete gitlab\n</code></pre>"},{"location":"charts/gitlab/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. backups.cronJob.annotations object <code>{}</code> Additional annotations for the cronjob object. backups.cronJob.enabled bool <code>false</code> Create a <code>CronJob</code> object for automated backups. backups.cronJob.failedJobsHistoryLimit int <code>1</code> The number of failed finished jobs to retain. backups.cronJob.labels object <code>{}</code> Additional labels for the cronjob object. backups.cronJob.schedule string <code>\"0 3 * * 1\"</code> Schedule for automated backups. backups.cronJob.successfulJobsHistoryLimit int <code>3</code> The number of successful finished jobs to retain. backups.cronJob.suspend bool <code>false</code> Enable/disable the cron job schedule quickly. backups.enabled bool <code>true</code> Enable backup-related volume mounts. backups.hostPath string <code>\"\"</code> Host path to store the created backups to. backups.mountPath string <code>\"/backups\"</code> Mount path of backups inside the container. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. configMap.annotations object <code>{}</code> Additional annotations for the config map object. configMap.config string <code>\"# external_url 'https://gitlab.example.com'\\n\"</code> String containing the configuration of gitlab. configMap.create bool <code>true</code> Create a new config map object. configMap.existingConfigMap string <code>\"\"</code> Mount path of the config map object. configMap.key string <code>\"gitlab.rb\"</code> Use an existing config map object. configMap.labels object <code>{}</code> Additional labels for the config map object. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. controller.strategy.rollingUpdate.maxSurge int <code>0</code> Specifies the maximum number of Pods that can be created over the desired number of Pods. controller.strategy.rollingUpdate.maxUnavailable int <code>1</code> Specifies the maximum number of Pods that can be unavailable during the update process. controller.strategy.type string <code>\"RollingUpdate\"</code> Strategy used to replace old pods. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> healthCheck.enabled bool <code>true</code> Enable health checks for the controller. healthCheck.whitelist list <code>[\"127.0.0.1\"]</code> Configure the internal health check whitelist of gitlab. image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"gitlab/gitlab-ce\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaims.secrets.annotations object <code>{}</code> Additional annotations for the secret persistent volume claim object. persistentVolumeClaims.secrets.create bool <code>true</code> Create a new secret persistent volume claim object. persistentVolumeClaims.secrets.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing secret persistent volume claim object. persistentVolumeClaims.secrets.labels object <code>{}</code> Additional labels for the secret persistent volume claim object. persistentVolumeClaims.secrets.mountPath string <code>\"/etc/gitlab\"</code> Mount path of the secret persistent volume claim object. persistentVolumeClaims.secrets.size string <code>\"128Mi\"</code> The size of the created secret persistent volume claim object. persistentVolumeClaims.secrets.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaims.storage.annotations object <code>{}</code> Additional annotations for the storage persistent volume claim object. persistentVolumeClaims.storage.create bool <code>true</code> Create a new storage persistent volume claim object. persistentVolumeClaims.storage.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing storage persistent volume claim object. persistentVolumeClaims.storage.labels object <code>{}</code> Additional labels for the storage persistent volume claim object. persistentVolumeClaims.storage.mountPath string <code>\"/var/opt/gitlab\"</code> Mount path of the storage persistent volume claim object. persistentVolumeClaims.storage.size string <code>\"30Gi\"</code> The size of the created secret storage persistent volume claim object. persistentVolumeClaims.storage.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>80</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. ports.registry.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.registry.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.registry.port int <code>5005</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.registry.protocol string <code>\"TCP\"</code> The protocol used for the service. rbac.annotations object <code>{}</code> Additional annotations for the role and role binding objects. rbac.create bool <code>true</code> Create <code>Role</code> and <code>RoleBinding</code> objects. rbac.labels object <code>{}</code> Additional labels for the role and role binding objects. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/gitlab/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/gitlab/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/homer/","title":"<code>homer</code>","text":"<p>A Helm chart for Kubernetes</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/bastienwirtz/homer</li> </ul>"},{"location":"charts/homer/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/homer/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install homer pascaliske/homer\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete homer\n</code></pre>"},{"location":"charts/homer/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. configMap.annotations object <code>{}</code> Additional annotations for the config map object. configMap.config string <code>\"title: Dashboard\\nservices: {}\\n\"</code> String containing the configuration of homer. configMap.create bool <code>true</code> Create a new config map object. configMap.existingConfigMap string <code>\"\"</code> Use an existing config map object. configMap.key string <code>\"config.yml\"</code> Specify a different key inside config map object. configMap.labels object <code>{}</code> Additional labels for the config map object. configMap.mountPath string <code>\"/www/assets\"</code> Mount path of the config map object. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"b4bz/homer\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>8080</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000}</code> Pod-level security attributes. More info here. securityContext.runAsGroup int <code>1000</code> Specify the group ID the application will run as securityContext.runAsNonRoot bool <code>true</code> Enable validation that the container must run as non-root user securityContext.runAsUser int <code>1000</code> Specify the user ID the application will run as service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller."},{"location":"charts/homer/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/homer/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/linkding/","title":"<code>linkding</code>","text":"<p>A Helm chart for linkding</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/sissbruecker/linkding</li> </ul>"},{"location":"charts/linkding/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/linkding/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install linkding pascaliske/linkding\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete linkding\n</code></pre>"},{"location":"charts/linkding/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description additionalContainers object <code>{}</code> Specify any additional containers here as dictionary items - each should have it's own key. affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"sissbruecker/linkding\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/etc/linkding/data\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>9090</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/linkding/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/linkding/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/paperless/","title":"<code>paperless</code>","text":"<p>A Helm chart for paperless-ngx</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/paperless-ngx/paperless-ngx</li> </ul>"},{"location":"charts/paperless/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/paperless/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install paperless pascaliske/paperless\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete paperless\n</code></pre>"},{"location":"charts/paperless/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. consumption.enabled bool <code>true</code> Enable the volume mount of a consumption directory. consumption.hostPath string <code>\"\"</code> Host path of the consumption directory outside the container. consumption.mountPath string <code>\"/consumption\"</code> Mount path of the consumption directory inside the container. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. export.cronJob.annotations object <code>{}</code> Additional annotations for the cronjob object. export.cronJob.enabled bool <code>false</code> Create a <code>CronJob</code> object for automated exports. export.cronJob.failedJobsHistoryLimit int <code>1</code> The number of failed finished jobs to retain. export.cronJob.labels object <code>{}</code> Additional labels for the cronjob object. export.cronJob.schedule string <code>\"0 4 * * 1\"</code> Schedule for automated exports. export.cronJob.successfulJobsHistoryLimit int <code>3</code> The number of successful finished jobs to retain. export.cronJob.suspend bool <code>false</code> Enable/disable the cron job schedule quickly. export.enabled bool <code>true</code> Enable the volume mount of an export directory for backups using the document exporter. export.hostPath string <code>\"\"</code> Host path of the export directory outside the container. export.mountPath string <code>\"/export\"</code> Mount path of the export directory inside the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"ghcr.io/paperless-ngx/paperless-ngx\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/usr/src/paperless\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>Deployment</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>8000</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. rbac.annotations object <code>{}</code> Additional annotations for the role and role binding objects. rbac.create bool <code>true</code> Create <code>Role</code> and <code>RoleBinding</code> objects. rbac.labels object <code>{}</code> Additional labels for the role and role binding objects. resources object <code>{}</code> Compute resources used by the container. More info here. secret.annotations object <code>{}</code> Additional annotations for the secret object. secret.create bool <code>true</code> Create a new secret containing the secret key. secret.existingSecret string <code>\"\"</code> Use an existing secret to store the secret key. secret.labels object <code>{}</code> Additional labels for the secret object. secret.secretKey string <code>\"\"</code> Secret key used when not using an existing secret. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. tolerations object <code>{}</code> Pod-level tolerations. More info here. trash.enabled bool <code>false</code> Enable the volume mount of a trash directory. trash.hostPath string <code>\"\"</code> Host path of the trash directory outside the container. trash.mountPath string <code>\"/trash\"</code> Mount path of the trash directory inside the container."},{"location":"charts/paperless/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/paperless/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/plausible/","title":"<code>plausible</code>","text":"<p>A Helm chart for Plausible</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/plausible/analytics</li> <li>https://github.com/plausible/hosting</li> <li>https://plausible.io</li> </ul>"},{"location":"charts/plausible/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/plausible/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install plausible pascaliske/plausible\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete plausible\n</code></pre>"},{"location":"charts/plausible/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"plausible/analytics\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> ports.http.enabled bool <code>true</code> Enable the port inside the <code>Deployment</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>8000</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.clusterIP string <code>\"\"</code> ClusterIP used if service type is <code>ClusterIP</code>. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.loadBalancerIP string <code>\"\"</code> LoadBalancerIP if service type is <code>LoadBalancer</code>. service.loadBalancerSourceRanges list <code>[]</code> Allowed addresses when service type is <code>LoadBalancer</code>. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. serviceMonitor.annotations object <code>{}</code> Additional annotations for the service monitor object. serviceMonitor.enabled bool <code>false</code> Create a service monitor for prometheus operator. serviceMonitor.interval string <code>\"30s\"</code> How frequently the exporter should be scraped. serviceMonitor.labels object <code>{}</code> Additional labels for the service monitor object. serviceMonitor.timeout string <code>\"10s\"</code> Timeout value for individual scrapes. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/plausible/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/plausible/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/prometheus/","title":"<code>prometheus</code>","text":"<p>:exclamation: This Helm Chart is deprecated!</p> <p>A Helm chart for prometheus</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/prometheus/prometheus</li> <li>https://prometheus.io</li> </ul>"},{"location":"charts/prometheus/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/prometheus/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install prometheus pascaliske/prometheus\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete prometheus\n</code></pre>"},{"location":"charts/prometheus/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. configMap.annotations object <code>{}</code> Additional annotations for the config map object. configMap.create bool <code>true</code> Create a new config map object. configMap.existingConfigMap string <code>\"\"</code> Use an existing config map object. configMap.files object <code>{}</code> Map of prometheus configuration files as strings. configMap.labels object <code>{}</code> Additional labels for the config map object. configMap.mountPath string <code>\"/etc/config\"</code> Mount path of the config map object. configMapReload.enabled bool <code>true</code> Enable automatic config map reload. configMapReload.extraArgs list <code>[]</code> List of extra arguments for the config map reload container. configMapReload.extraConfigMapMounts list <code>[]</code> List of extra config map mounts for the config map reload container. configMapReload.image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the config map reloader. configMapReload.image.repository string <code>\"jimmidyson/configmap-reload\"</code> Image of the config map reloader. configMapReload.image.tag string <code>\"v0.8.0\"</code> Tag of the config map reloader. configMapReload.resources object <code>{}</code> Compute resources used by the config map reload container. More info here. deployment.annotations object <code>{}</code> Additional annotations for the deployment object. deployment.enabled bool <code>true</code> Create a workload for this chart. deployment.kind string <code>\"Deployment\"</code> Type of the workload object. deployment.labels object <code>{}</code> Additional labels for the deployment object. deployment.replicas int <code>1</code> The number of replicas. deployment.strategy.rollingUpdate.maxSurge int <code>0</code> Specifies the maximum number of Pods that can be created over the desired number of Pods. deployment.strategy.rollingUpdate.maxUnavailable int <code>1</code> Specifies the maximum number of Pods that can be unavailable during the update process. deployment.strategy.type string <code>\"RollingUpdate\"</code> Strategy used to replace old pods. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. extraArgs list <code>[]</code> List of extra arguments for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the deployment. image.repository string <code>\"prom/prometheus\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/prometheus\"</code> Mount path of the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>Deployment</code> and <code>Service</code> objects. ports.http.port int <code>9090</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. rbac.annotations object <code>{}</code> Additional annotations for the role and role binding objects. rbac.create bool <code>true</code> Create <code>Role</code> and <code>RoleBinding</code> objects. rbac.labels object <code>{}</code> Additional labels for the role and role binding objects. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.annotations object <code>{}</code> Additional annotations for the service account object. serviceAccount.create bool <code>true</code> Create a service account for the deployment. serviceAccount.labels object <code>{}</code> Additional labels for the service account object. serviceAccount.name string <code>\"\"</code> Specify the service account name used for the deployment."},{"location":"charts/prometheus/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/redis/","title":"<code>redis</code>","text":"<p>A Helm chart for Redis</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/docker-library/redis</li> <li>https://github.com/redis/redis</li> <li>https://redis.io</li> </ul>"},{"location":"charts/redis/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/redis/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install redis pascaliske/redis\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete redis\n</code></pre>"},{"location":"charts/redis/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"StatefulSet\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. extraArgs list <code>[]</code> List of extra arguments for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"redis\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/data\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>Controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>6379</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.clusterIP string <code>\"\"</code> ClusterIP used if service type is <code>ClusterIP</code>. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.loadBalancerIP string <code>\"\"</code> LoadBalancerIP if service type is <code>LoadBalancer</code>. service.loadBalancerSourceRanges list <code>[]</code> Allowed addresses when service type is <code>LoadBalancer</code>. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller."},{"location":"charts/redis/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/redis/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/snapdrop/","title":"<code>snapdrop</code>","text":"<p>A Helm chart for snapdrop</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/linuxserver/docker-snapdrop</li> <li>https://github.com/RobinLinus/snapdrop</li> </ul>"},{"location":"charts/snapdrop/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/snapdrop/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install snapdrop pascaliske/snapdrop\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete snapdrop\n</code></pre>"},{"location":"charts/snapdrop/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. env[1] object <code>{\"name\":\"PUID\",\"value\":1000}</code> UID to be used at runtime inside the container. env[2] object <code>{\"name\":\"PGID\",\"value\":1000}</code> GID to be used at runtime inside the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"ghcr.io/linuxserver/snapdrop\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>80</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller."},{"location":"charts/snapdrop/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/snapdrop/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/traefik-errors/","title":"<code>traefik-errors</code>","text":"<p>A Helm chart for custom traefik error pages</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/pascaliske/docker-traefik-errors</li> </ul>"},{"location":"charts/traefik-errors/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/traefik-errors/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install traefik-errors pascaliske/traefik-errors\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete traefik-errors\n</code></pre>"},{"location":"charts/traefik-errors/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"ghcr.io/pascaliske/traefik-errors\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. middleware.annotations object <code>{}</code> Additional annotations for the middleware object. middleware.create bool <code>false</code> Create an Middleware object for the exposed chart. middleware.homeUrl string <code>\"\"</code> Optional home url parameter for the error pages. middleware.labels object <code>{}</code> Additional labels for the middleware object. middleware.name string <code>\"\"</code> Set explicit name of middleware, defaults to chart name. middleware.statusCodes list <code>[\"400-599\"]</code> List of error codes which result in an error page. nameOverride string <code>\"\"</code> ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.port int <code>8080</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/traefik-errors/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/traefik-errors/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/unbound/","title":"<code>unbound</code>","text":"<p>A Helm chart for unbound DNS resolver.</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/pascaliske/docker-unbound</li> <li>https://github.com/NLnetLabs/unbound</li> </ul>"},{"location":"charts/unbound/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/unbound/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install unbound pascaliske/unbound\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete unbound\n</code></pre>"},{"location":"charts/unbound/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. controller.strategy.rollingUpdate.maxSurge int <code>1</code> Specifies the maximum number of Pods that can be created over the desired number of Pods. controller.strategy.rollingUpdate.maxUnavailable int <code>0</code> Specifies the maximum number of Pods that can be unavailable during the update process. controller.strategy.type string <code>\"RollingUpdate\"</code> Strategy used to replace old pods. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"ghcr.io/pascaliske/unbound\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. nameOverride string <code>\"\"</code> resources object <code>{}</code> Compute resources used by the container. More info here. service.dns.annotations object <code>{}</code> Additional annotations for the service object. service.dns.enabled bool <code>true</code> Create a service for DNS endpoints. service.dns.labels object <code>{}</code> Additional labels for the service object. service.dns.nodePort string <code>nil</code> If the service is NodePort, specify a node port value here. service.dns.port int <code>5053</code> The service port used. service.dns.single bool <code>true</code> Combine TCP and UDP endpoints in a single service. service.dns.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/unbound/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/unbound/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/uptime-kuma/","title":"<code>uptime-kuma</code>","text":"<p>A Helm chart for Kubernetes</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://github.com/louislam/uptime-kuma</li> </ul>"},{"location":"charts/uptime-kuma/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/uptime-kuma/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install uptime-kuma pascaliske/uptime-kuma\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete uptime-kuma\n</code></pre>"},{"location":"charts/uptime-kuma/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"louislam/uptime-kuma\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/app/data\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.http.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.http.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.http.port int <code>3001</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.http.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. serviceMonitor.annotations object <code>{}</code> Additional annotations for the service monitor object. serviceMonitor.enabled bool <code>false</code> Create a service monitor for prometheus operator. serviceMonitor.interval string <code>\"30s\"</code> How frequently the exporter should be scraped. serviceMonitor.labels object <code>{}</code> Additional labels for the service monitor object. serviceMonitor.timeout string <code>\"10s\"</code> Timeout value for individual scrapes. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/uptime-kuma/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/uptime-kuma/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"},{"location":"charts/vikunja/","title":"<code>vikunja</code>","text":"<p>A Helm chart for Kubernetes</p> <p> </p> <ul> <li>https://github.com/pascaliske/helm-charts</li> <li>https://code.vikunja.io</li> <li>https://vikunja.io</li> </ul>"},{"location":"charts/vikunja/#requirements","title":"Requirements","text":"<ul> <li><code>helm</code> - Refer to their docs to get started.</li> </ul>"},{"location":"charts/vikunja/#usage","title":"Usage","text":"<p>To use this chart add the repo as follows:</p> <pre><code>helm repo add pascaliske https://charts.pascaliske.dev\n</code></pre> <p>If you had already added this repo earlier, run <code>helm repo update</code> to retrieve the latest versions of the packages.</p> <p>To install this chart simply run the following command:</p> <pre><code>helm install vikunja pascaliske/vikunja\n</code></pre> <p>To uninstall this chart simply run the following command:</p> <pre><code>helm delete vikunja\n</code></pre>"},{"location":"charts/vikunja/#values","title":"Values","text":"<p>The following values can be used to adjust the helm chart.</p> Key Type Default Description affinity object <code>{}</code> Pod-level affinity. More info here. certificate.annotations object <code>{}</code> Additional annotations for the certificate object. certificate.create bool <code>false</code> Create an Certificate object for the exposed chart. certificate.dnsNames list <code>[]</code> List of subject alternative names for the certificate. certificate.issuerRef.kind string <code>\"ClusterIssuer\"</code> Type of the referenced certificate issuer. Can be \"Issuer\" or \"ClusterIssuer\". certificate.issuerRef.name string <code>\"\"</code> Name of the referenced certificate issuer. certificate.labels object <code>{}</code> Additional labels for the certificate object. certificate.secretName string <code>\"\"</code> Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames. controller.annotations object <code>{}</code> Additional annotations for the controller object. controller.enabled bool <code>true</code> Create a workload for this chart. controller.kind string <code>\"Deployment\"</code> Type of the workload object. controller.labels object <code>{}</code> Additional labels for the controller object. controller.replicas int <code>1</code> The number of replicas. env[0] object <code>{\"name\":\"TZ\",\"value\":\"UTC\"}</code> Timezone for the container. fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> The pull policy for the controller. image.repository string <code>\"vikunja/api\"</code> The repository to pull the image from. image.tag string <code>.Chart.AppVersion</code> The docker tag, if left empty chart's appVersion will be used. ingressRoute.annotations object <code>{}</code> Additional annotations for the ingress route object. ingressRoute.create bool <code>false</code> Create an IngressRoute object for exposing this chart. ingressRoute.entryPoints list <code>[]</code> List of entry points on which the ingress route will be available. ingressRoute.labels object <code>{}</code> Additional labels for the ingress route object. ingressRoute.middlewares list <code>[]</code> List of middleware objects for the ingress route. ingressRoute.rule string <code>\"\"</code> Matching rule for the underlying router. ingressRoute.tlsSecretName string <code>\"\"</code> Use an existing secret containing the TLS certificate. nameOverride string <code>\"\"</code> persistentVolumeClaim.accessMode string <code>\"ReadWriteOnce\"</code> Access mode of the persistent volume claim object. persistentVolumeClaim.annotations object <code>{}</code> Additional annotations for the persistent volume claim object. persistentVolumeClaim.create bool <code>true</code> Create a new persistent volume claim object. persistentVolumeClaim.existingPersistentVolumeClaim string <code>\"\"</code> Use an existing persistent volume claim object. persistentVolumeClaim.labels object <code>{}</code> Additional labels for the persistent volume claim object. persistentVolumeClaim.mountPath string <code>\"/app/vikunja/files\"</code> Mount path of the persistent volume claim object. persistentVolumeClaim.size string <code>\"1Gi\"</code> Storage request size for the persistent volume claim object. persistentVolumeClaim.storageClassName string <code>\"\"</code> Storage class name for the persistent volume claim object. persistentVolumeClaim.volumeMode string <code>\"Filesystem\"</code> Volume mode of the persistent volume claim object. ports.api.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.api.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.api.port int <code>3456</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.api.protocol string <code>\"TCP\"</code> The protocol used for the service. ports.frontend.enabled bool <code>true</code> Enable the port inside the <code>controller</code> and <code>Service</code> objects. ports.frontend.nodePort string <code>nil</code> The external port used if <code>.service.type</code> == <code>NodePort</code>. ports.frontend.port int <code>80</code> The port used as internal port and cluster-wide port if <code>.service.type</code> == <code>ClusterIP</code>. ports.frontend.protocol string <code>\"TCP\"</code> The protocol used for the service. resources object <code>{}</code> Compute resources used by the container. More info here. securityContext object <code>{}</code> Pod-level security attributes. More info here. service.annotations object <code>{}</code> Additional annotations for the service object. service.enabled bool <code>true</code> Create a service for exposing this chart. service.labels object <code>{}</code> Additional labels for the service object. service.type string <code>\"ClusterIP\"</code> The service type used. serviceAccount.name string <code>\"\"</code> Specify the service account used for the controller. serviceMonitor.annotations object <code>{}</code> Additional annotations for the service monitor object. serviceMonitor.enabled bool <code>false</code> Create a service monitor for prometheus operator. serviceMonitor.interval string <code>\"30s\"</code> How frequently the exporter should be scraped. serviceMonitor.labels object <code>{}</code> Additional labels for the service monitor object. serviceMonitor.timeout string <code>\"10s\"</code> Timeout value for individual scrapes. tolerations object <code>{}</code> Pod-level tolerations. More info here."},{"location":"charts/vikunja/#maintainers","title":"Maintainers","text":"Name Email Url pascaliske info@pascaliske.dev https://pascaliske.dev"},{"location":"charts/vikunja/#license","title":"License","text":"<p>MIT \u2013 \u00a9 2023 Pascal Iske</p>"}]}